#!/usr/bin/env node
var debug = require('debug')('dashboard');
var app = require('../app');
var c = require(__base + '../shared-config/constants');
var log = c.getLog('explore/bin/www');
var MongoClient = require('mongodb').MongoClient;
var https = require('https');
var http = require('http');
var fs = require('fs');

app.set('port', process.env.PORT);

function unableToConnectToDB(e){
	log('error', 'missing mongo url', 'generate .env by running: heroku config:get MONGOHQ_URL -s  >> .env');

	if(e){
		log('error', 'mongo connection error', e);
	}
}

var url = process.env.MONGOHQ_URL;

if(!url){
	unableToConnectToDB();
	return;
}

//MAKE THIS PRETTIER AND ABSTRACT IT
try {
MongoClient.connect(url, function(err, db) {

    if(!err){

        log('trace', 'connected to ' + url);

    	log('trace', 'adding  db and lang to');

    	//todo: remove this, add it to locals
        app.use(function(req, res, next){
            req._db = {
                fatalities : db.collection(c.collection.fatalities),
                users : db.collection(c.collection.users)
            };

            req.lang = req.query.lang || 'en';

            next();
        });

        // development error handler
		// will print stacktrace
		if (app.get('env') === 'development') {
		    app.use(function(err, req, res, next) {
		        res.status(err.status || 500);
		        res.render('error', {
		            message: err.message,
		            error: err
		        });
		    });
		}

        // production error handler
		// no stacktraces leaked to user
		app.use(function(err, req, res, next) {
		    res.status(err.status || 500);
		    res.render('error', {
		        message: err.message,
		        error: {}
		    });
		});

        log('trace', 'adding app.locals');

        //set urls to locals
        app.use(function(req, res, next) {

			req._rootUrl = function() {
				var url = req.protocol + "://" + req.get('host');

				return url;
			}

			req.app.locals.url_root = req._rootUrl();
			req.app.locals.url_data = req.app.locals.url_root + '/data/api/v1';
			req.app.locals.url_list = req.app.locals.url_root + '/list';
			req.app.locals.url_distinct = req.app.locals.url_data + '/distinct/';
			req.app.locals.url_details = req.app.locals.url_data + '/details/';
			req.app.locals.url_current = req.app.locals.url_root + req.url;

			return next();
		});

		log('trace', 'setting up routes');

        //routes
        app.use('/', require('../routes/home'));
        app.use('/list/', require('../routes/list'));
        app.use('/contact/', require('../routes/contact'));
        app.use('/data/', require('../routes/data'));
        app.use('/details/', require('../routes/details'));
		app.use('/login/', require('../routes/login'));
		app.use('/user/', require('../routes/user'));

		log('trace', 'setting up 404 page');

        // catch 404 and forward to error handler
		app.use(function(req, res, next) {

		    var err = new Error('Not Found');
		    err.status = 404;
		    next(err);
		
		});

		log('trace', 'setting up http server');

		var httpServer = http.createServer(app).listen(app.get('port'));

		log('trace', 'getting key and cert');

		var key, cert;

		try{

			key = fs.readFileSync(__base + '../keys/key.pem');
		
		} catch(e){
		
			log('trace', 'cannot get key');
		
		}

		try{
		
			cert = fs.readFileSync(__base + '../keys/cert.pem');
		
		} catch(e){
		
			log('trace', 'cannot get cert');
		
		}

		if(key && cert){
		
			log('trace', 'creating https options');

			var options = {
	  			"key" : key,
	  			"cert" : cert
			};

			log('trace', 'creating https server');

			var httpsServer = https.createServer(options, app).listen(8000);
		}

    } else {

        log('error', 'could not connect to connected to ' + url, err);

        cb(err);

    }
});
} catch (e){
	unableToConnectToDB(e);
}
